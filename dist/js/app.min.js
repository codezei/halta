/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// // Import vendor jQuery plugin example
// import '~/app/js/wow.js'

document.addEventListener('DOMContentLoaded', function () {
  mobMenuToggle();
  toggleJoinItems();
  stickyHeader();
  customSelect();
  valuesSlider();
  teamSlider();
  toggleFaqItems('.faqs__item-question');
  toggleFaqItems('.faq__item-question');
  toggleFaqCategories('.faq__category', '.faq__item');
  formValidation();
  switchFormSteps();
  toggleContent('.account-content', '.account-content__edit-btn');
  toggleContent('.account-sidebar', '.account-sidebar-toggle');
  var wow = new WOW({
    boxClass: 'wow',
    animateClass: 'animated',
    offset: 0,
    mobile: true,
    live: true
  }).init();
  smoothScroll();
});
function toggleJoinItems() {
  var itemsLinks = document.querySelectorAll('.join__item-btn');
  var activeItem = document.querySelector('.join__item.active');
  if (!itemsLinks.length) return;
  for (var i = 0; i < itemsLinks.length; i++) {
    itemsLinks[i].addEventListener('click', function (e) {
      e.preventDefault();
      if (e.currentTarget.parentElement === activeItem) {
        location.href = e.currentTarget.href;
      } else {
        activeItem.classList.remove('active');
        activeItem = e.currentTarget.parentElement;
        activeItem.classList.add('active');
      }
    });
  }
}
function toggleFaqItems(faqItemsQuestion) {
  var questions = document.querySelectorAll(faqItemsQuestion);
  if (!questions.length) return;
  var activeQuestion;
  for (var i = 0; i < questions.length; i++) {
    questions[i].addEventListener('click', function (e) {
      if (activeQuestion) {
        activeQuestion.classList.remove('active');
      }
      activeQuestion = e.currentTarget.parentElement;
      activeQuestion.classList.add('active');
    });
  }
}
function toggleFaqCategories(faqCategories, faqItems) {
  var categories = document.querySelectorAll(faqCategories);
  if (!categories.length) return;
  var items = document.querySelectorAll(faqItems);
  var activeCategory = categories[0];
  activeCategory.classList.add('active');
  for (var k = 0; k < categories.length; k++) {
    categories[k].addEventListener('click', function (e) {
      if (activeCategory) {
        activeCategory.classList.remove('active');
      }
      activeCategory = e.currentTarget;
      activeCategory.classList.add('active');
      filterItems(items, activeCategory);
    });
  }
  function filterItems(filteringItems, flteringActiveCategory) {
    for (var c = 0; c < filteringItems.length; c++) {
      if (flteringActiveCategory.dataset.category === filteringItems[c].dataset.category) {
        filteringItems[c].style.display = '';
      } else if (flteringActiveCategory.dataset.category === 'all') {
        filteringItems[c].style.display = '';
      } else {
        filteringItems[c].style.display = 'none';
      }
    }
  }
}

// function faq () {
// 	let faqItems = document.querySelectorAll('.faq__item')
// 	if (!faqItems.length) return
// 	let faqQuestions = document.querySelectorAll('.faq__item-question')
// 	let faqCategories = document.querySelectorAll('.faq__category')
// 	let activeCategory = faqCategories[0]
// 	let activeQuestion = faqItems[0]
// 	let filteringFaqQuestions = []

// 	activeCategory.classList.add('active')
// 	activeQuestion.classList.add('active')

// 	for(let i = 0; i < faqQuestions.length; i++) {
// 		faqQuestions[i].addEventListener('click', function (e) {
// 			activeQuestion.classList.remove('active')
// 			activeQuestion = e.currentTarget.parentElement
// 			activeQuestion.classList.add('active')
// 		})
// 	}

// 	for(let k = 0; k < faqCategories.length; k++) {
// 		faqCategories[k].addEventListener('click', function (e) {
// 			activeCategory.classList.remove('active')
// 			activeCategory = e.currentTarget
// 			activeCategory.classList.add('active')
// 			filteringFaqQuestions = []

// 			for(let c = 0; c < faqItems.length; c++) {
// 				 if (activeCategory.dataset.category === faqItems[c].dataset.category) {
// 					faqItems[c].style.display = ''
// 					filteringFaqQuestions.push(faqItems[c])
// 					activeQuestion.classList.remove('active')
// 					activeQuestion = filteringFaqQuestions[0]
// 					activeQuestion.classList.add('active')
// 				}  else if (activeCategory.dataset.category === 'all') {
// 					faqItems[c].style.display = ''
// 					activeQuestion.classList.remove('active')
// 					activeQuestion = faqItems[0]
// 					activeQuestion.classList.add('active')
// 				} else {
// 					faqItems[c].style.display = 'none'
// 				}

// 			}
// 		})
// 	}

// }

// мобильное меню
function mobMenuToggle() {
  var btn = document.querySelector('.header__navigation-btn-menu');
  var menu = document.querySelector('.header__navigation');
  var header = document.querySelector('.header');
  btn.addEventListener('click', function (e) {
    btn.classList.toggle('active');
    menu.classList.toggle('active');
    header.classList.toggle('active');
  });
}
function stickyHeader() {
  var header = document.querySelector('.header');
  if (document.body.getBoundingClientRect().top < 0) {
    header.classList.add('sticky');
  } else {
    header.classList.remove('sticky');
  }
  document.addEventListener('scroll', function () {
    if (document.body.getBoundingClientRect().top < 0) {
      header.classList.add('sticky');
    } else {
      header.classList.remove('sticky');
    }
  });
}
function customSelect() {
  var select = document.querySelectorAll('.select');
  if (!select.length) return;
  for (var i = 0; i < select.length; i++) {
    select[i].addEventListener('click', function (e) {
      var selected = e.currentTarget.querySelector('.selected');
      var input = selected.querySelector('input');
      e.currentTarget.classList.toggle('open');
      if (e.target.classList.contains('option') && e.target.dataset.option) {
        if (input) {
          input.value = e.target.dataset.option;

          // проверка валидации селекта с вводом цифр зип код
          validateInput(input);
        }
      }
    });
  }
}
function valuesSlider() {
  var swiper = new Swiper(".values-slider", {
    slidesPerView: 1,
    spaceBetween: 40,
    navigation: {
      nextEl: ".values-button-next",
      prevEl: ".values-button-prev"
    },
    pagination: {
      el: ".values-pagination",
      clickable: true,
      renderBullet: function renderBullet(index, className) {
        var preValue = '';
        if (index < 9) {
          preValue = '0';
        } else {
          preValue = '';
        }
        return '<div class="' + className + '">' + preValue + (index + 1) + "</div>";
      }
    }

    // breakpoints: {
    // 	992: {
    // 		slidesPerView: 1,
    // 	},
    // }
  });
}

function teamSlider() {
  var swiper = new Swiper(".team-slider", {
    slidesPerView: 1,
    spaceBetween: 32,
    navigation: {
      nextEl: ".team-button-next",
      prevEl: ".team-button-prev"
    }
    // breakpoints: {
    // 	991: {
    // 		slidesPerView: 2,
    // 		spaceBetweenSlides: 0
    // 	},
    // }
  });
}

function switchFormSteps() {
  var formSteps = document.querySelectorAll('.form__step');
  if (!formSteps.length) return;
  var activeFormStep = document.querySelector('.form__step.active');
  changeProgressbar(+activeFormStep.dataset.step);
  var _loop = function _loop(i) {
    var btnNextStep = formSteps[i].querySelector('.form__btn');
    if (btnNextStep.type === 'button') {
      btnNextStep.addEventListener('click', function () {
        var formStepInputs = formSteps[i].querySelectorAll('input[required]');
        for (var k = 0; k < formStepInputs.length; k++) {
          validateInput(formStepInputs[k]);
        }
        checkFormStepError(formSteps[i], nextFormStep);
      });
    }
    // btnNextStep.type === "button" && btnNextStep.addEventListener('click', function () {
    // 	let formStepInputs = formSteps[i].querySelectorAll('input[required]')
    // 	for (let k = 0; k < formStepInputs.length; k++) {
    // 		validateInput(formStepInputs[k])
    // 	}
    // 	checkFormStepError(formSteps[i], nextFormStep)
    // })
  };
  for (var i = 0; i < formSteps.length; i++) {
    _loop(i);
  }
}
function checkFormStepError(currentFormStep, nextFormStepCallback) {
  var hasErrors = currentFormStep.querySelector('.error');
  if (!hasErrors) {
    nextFormStepCallback();
  }
}
function nextFormStep() {
  var activeFormStep = document.querySelector('.form__step.active');
  activeFormStep.classList.remove('active');
  activeFormStep.nextElementSibling.classList.add('active');
  changeProgressbar(+activeFormStep.nextElementSibling.dataset.step);
}
function changeProgressbar(currentStep) {
  var bars = document.querySelectorAll('.form__progress');
  setTimeout(function () {
    bars[currentStep - 1].children[0].style.width = "".concat(currentStep / bars.length * 100, "%");
  }, 100);
}
function formValidation(callbackSubmitFunc) {
  var form = document.querySelector('.js-form-validation');
  if (!form) return;
  form.addEventListener('keyup', function (e) {
    validateInput(e.target);
  });
  form.addEventListener('submit', function (e) {
    e.preventDefault();
    var formInputs = e.currentTarget.querySelectorAll('input[required]');
    for (var k = 0; k < formInputs.length; k++) {
      validateInput(formInputs[k]);
    }
    checkFormStepError(e.target, function () {
      // колбэк функци после успешной валидации
      // if (callbackSubmitFunc) {
      // 	callbackSubmitFunc()
      // }
      e.target.submit();
      console.log('form success submit');
    });
  });
}
function validateInput(input) {
  var regexPatterns = {
    firstname: /^[а-яА-Яa-zA-Z\s]+$/,
    lastname: /^[а-яА-Яa-zA-Z\s]+$/,
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    phonenumber: /^\+?[0-9]+$/,
    zipcode: /^[0-9]{5}\-[0-9]{5}$/,
    birthday: /^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/,
    todaydate: /^[0-9]{2}\.[0-9]{2}\.[0-9]{4}$/
  };
  var currentInput = input.form[input.name];
  var validateResult = false;
  if (currentInput.length) {
    validateResult = _toConsumableArray(currentInput).find(function (checkbox) {
      return checkbox.checked;
    });
  } else if (currentInput.type === "checkbox" || currentInput.type === "radio") {
    validateResult = currentInput.checked;
  } else if (regexPatterns[currentInput.name]) {
    validateResult = regexPatterns[currentInput.name].test(currentInput.value);
  } else {
    validateResult = !!currentInput.value.length;
  }
  setInputValidationResult(currentInput, validateResult);
  return validateResult;
}
function setInputValidationResult(input, result) {
  if (result) {
    if (input.length) {
      input[0].parentElement.parentElement.classList.remove('error');
    } else if (input.type === "checkbox" || input.type === "radio") {
      input.parentElement.parentElement.classList.remove('error');
    } else {
      input.classList.remove('error');
    }
  } else {
    if (input.length) {
      input[0].parentElement.parentElement.classList.add('error');
    } else if (input.type === "checkbox" || input.type === "radio") {
      input.parentElement.parentElement.classList.add('error');
    } else {
      input.classList.add('error');
    }
  }
}
function toggleContent(block, target) {
  var container = document.querySelector(block);
  var btn = document.querySelector(target);
  if (!container || !btn) return;
  btn.addEventListener('click', function (e) {
    e.currentTarget.classList.toggle('active');
    container.classList.toggle('active');
  });
}
function smoothScroll() {
  var linkNav = document.querySelectorAll('[href^="#"]');
  var headerHeight = document.querySelector('.header').getBoundingClientRect().height;
  var V = 0.2;
  for (var i = 0; i < linkNav.length; i++) {
    linkNav[i].addEventListener('click', function (e) {
      //по клику на ссылку
      e.preventDefault(); //отменяем стандартное поведение
      var w = window.pageYOffset; // производим прокрутка прокрутка
      var hash = this.href.replace(/[^#]*(.*)/, '$1');
      var tar = document.querySelector(hash); // к id элемента, к которому нужно перейти
      var t = tar.getBoundingClientRect().top - headerHeight;
      var start = null;
      requestAnimationFrame(step); // подробнее про функцию анимации [developer.mozilla.org]
      function step(time) {
        if (start === null) {
          start = time;
        }
        var progress = time - start,
          r = t < 0 ? Math.max(w - progress / V, w + t) : Math.min(w + progress / V, w + t);
        window.scrollTo(0, r);
        if (r != w + t) {
          requestAnimationFrame(step);
        } else {
          location.hash = hash; // URL с хэшем
        }
      }

      if (t > 1 || t < -1) {
        requestAnimationFrame(step);
      }
    });
  }
}
/******/ })()
;